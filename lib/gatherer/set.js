// Generated by CoffeeScript 1.7.1
(function() {
  var Q, cheerio, converted_mana_costs, extract, extract_card, gatherer, rarities, supertypes, to_converted_mana_cost, url, _;

  url = require('url');

  cheerio = require('cheerio');

  Q = require('q');

  _ = require('underscore');

  gatherer = require('../gatherer');

  rarities = require('../rarities');

  supertypes = require('../supertypes');

  module.exports = function(name, callback) {
    var common_params;
    common_params = {
      advanced: 'true',
      set: "[\"" + name + "\"]",
      special: 'true'
    };
    gatherer.request(gatherer.url('/Pages/Search/Default.aspx', _.extend({
      output: 'checklist'
    }, common_params)), function(err, res) {
      var $, cards$;
      if (err != null) {
        callback(err);
        return;
      }
      $ = cheerio.load(res.body);
      cards$ = _.map($('.cardItem'), function(el) {
        var get;
        get = function(selector) {
          return $(el).find(selector).text();
        };
        return {
          color_indicator: get('.color'),
          name: get('.name'),
          rarity: rarities[get('.rarity')]
        };
      });
      return Q.all(_.map(_.range(Math.ceil(cards$.length / 25)), function(page) {
        var deferred;
        deferred = Q.defer();
        gatherer.request(gatherer.url('/Pages/Search/Default.aspx', _.extend({
          output: 'standard',
          page: "" + page
        }, common_params)), deferred.makeNodeResolver());
        return deferred.promise;
      })).then(function(xs) {
        var c$, card, card$, card_name, color, idx, versions, _i, _j, _len, _len1, _ref;
        for (_i = 0, _len = xs.length; _i < _len; _i++) {
          res = xs[_i][0];
          _ref = extract(cheerio.load(res.body), name);
          for (card_name in _ref) {
            versions = _ref[card_name];
            for (idx = _j = 0, _len1 = versions.length; _j < _len1; idx = ++_j) {
              card = versions[idx];
              card$ = ((function() {
                var _k, _len2, _results;
                _results = [];
                for (_k = 0, _len2 = cards$.length; _k < _len2; _k++) {
                  c$ = cards$[_k];
                  if (c$.name === card_name) {
                    _results.push(c$);
                  }
                }
                return _results;
              })())[idx];
              _.extend(card$, card);
              card$.expansion = name;
              color = card$.color_indicator;
              if (!(color === 'White' && !/W/.test(card$.mana_cost) || color === 'Blue' && !/U/.test(card$.mana_cost) || color === 'Black' && !/B/.test(card$.mana_cost) || color === 'Red' && !/R/.test(card$.mana_cost) || color === 'Green' && !/G/.test(card$.mana_cost))) {
                delete card$.color_indicator;
              }
            }
          }
        }
        return cards$;
      }).done(_.partial(callback, null), callback);
    });
  };

  extract_card = function($el, set_name) {
    var $card, card$, lines, mana_cost, match, name, name_match, param, stats, subtypes, types, _ref, _ref1, _ref2, _ref3;
    $card = $el.closest('.cardItem');
    param = /multiverseid=\d+/.exec($el.attr('href'))[0];
    card$ = {
      text: _.map($card.find('.rulesText').find('p'), _.compose(gatherer._get_text, cheerio)).join('\n\n'),
      gatherer_url: "" + gatherer.origin + "/Pages/Card/Details.aspx?" + param,
      image_url: "" + gatherer.origin + "/Handlers/Image.ashx?" + param + "&type=card",
      versions: _.object(_.map($card.find('.setVersions').find('img'), function(el) {
        return _.rest(/^(.*) [(](.*?)[)]$/.exec(cheerio(el).attr('alt')));
      }))
    };
    name = $card.find('.cardTitle').text().trim();
    name_match = /[(](.*)[)]$/.exec(name);
    card$.name = (name_match != null) && (set_name !== 'Unglued' && set_name !== 'Unhinged') ? name_match[1] : name;
    mana_cost = gatherer._get_text($card.find('.manaCost'));
    if (mana_cost !== '') {
      card$.mana_cost = mana_cost;
    }
    card$.converted_mana_cost = to_converted_mana_cost(mana_cost);
    lines = $card.find('.typeLine').text().match(/^.*$/gm).map(function(s) {
      return s.trim();
    });
    stats = lines[4].slice(1, -1);
    if (lines[2] === 'Vanguard') {
      _ref = stats.split('/').map(gatherer._to_stat), card$.hand_modifier = _ref[0], card$.life_modifier = _ref[1];
    } else {
      if (/^\d+$/.test(stats)) {
        card$.loyalty = +stats;
      } else if (match = /^((?:\{[^}]*\}|[^/])*)[/](.*)$/.exec(stats)) {
        _ref1 = _.map(match.slice(1, 3), gatherer._to_stat), card$.power = _ref1[0], card$.toughness = _ref1[1];
      }
      _ref2 = lines[2].split('\u2014').map(function(s) {
        return s.trim();
      }), types = _ref2[0], subtypes = _ref2[1];
      _ref3 = _.partition(types.split(' '), _.partial(_.contains, supertypes)), card$.supertypes = _ref3[0], card$.types = _ref3[1];
      card$.subtypes = subtypes != null ? subtypes.split(' ') : [];
    }
    return card$;
  };

  extract = function($, set_name) {
    return _.chain($('.cardItem').find('.setVersions').find('img')).map(cheerio).filter(function($el) {
      return $el.attr('alt').indexOf("" + set_name + " (") === 0;
    }).invoke('parent').map(_.partial(extract_card, _, set_name)).sortBy('gatherer_url').groupBy('name').value();
  };

  converted_mana_costs = {
    '{X}': 0,
    '{4}': 4,
    '{10}': 10,
    '{16}': 16,
    '{2/W}': 2,
    '{Y}': 0,
    '{5}': 5,
    '{11}': 11,
    '{17}': 17,
    '{2/U}': 2,
    '{Z}': 0,
    '{6}': 6,
    '{12}': 12,
    '{18}': 18,
    '{2/B}': 2,
    '{0}': 0,
    '{7}': 7,
    '{13}': 13,
    '{19}': 19,
    '{2/R}': 2,
    '{2}': 2,
    '{8}': 8,
    '{14}': 14,
    '{20}': 20,
    '{2/G}': 2,
    '{3}': 3,
    '{9}': 9,
    '{15}': 15
  };

  to_converted_mana_cost = function(mana_cost) {
    var cmc, symbol, _i, _len, _ref, _ref1;
    cmc = 0;
    _ref = mana_cost.split(/(?=[{])/);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      symbol = _ref[_i];
      cmc += (_ref1 = converted_mana_costs[symbol]) != null ? _ref1 : 1;
    }
    return cmc;
  };

}).call(this);
